/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface GeneratorInterfaceInterface extends ethers.utils.Interface {
  functions: {
    "genNFTContract(address,tuple)": FunctionFragment;
    "slottingFee()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "genNFTContract",
    values: [
      string,
      {
        name: string;
        symbol: string;
        payees: string[];
        shares: BigNumberish[];
        typeOfNFT: BigNumberish;
        maxSupply: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "slottingFee",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "genNFTContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slottingFee",
    data: BytesLike
  ): Result;

  events: {};
}

export class GeneratorInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: GeneratorInterfaceInterface;

  functions: {
    genNFTContract(
      arg0: string,
      arg1: {
        name: string;
        symbol: string;
        payees: string[];
        shares: BigNumberish[];
        typeOfNFT: BigNumberish;
        maxSupply: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "genNFTContract(address,(string,string,address[],uint256[],uint32,uint32))"(
      arg0: string,
      arg1: {
        name: string;
        symbol: string;
        payees: string[];
        shares: BigNumberish[];
        typeOfNFT: BigNumberish;
        maxSupply: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    slottingFee(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "slottingFee()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  genNFTContract(
    arg0: string,
    arg1: {
      name: string;
      symbol: string;
      payees: string[];
      shares: BigNumberish[];
      typeOfNFT: BigNumberish;
      maxSupply: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "genNFTContract(address,(string,string,address[],uint256[],uint32,uint32))"(
    arg0: string,
    arg1: {
      name: string;
      symbol: string;
      payees: string[];
      shares: BigNumberish[];
      typeOfNFT: BigNumberish;
      maxSupply: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  slottingFee(overrides?: CallOverrides): Promise<BigNumber>;

  "slottingFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    genNFTContract(
      arg0: string,
      arg1: {
        name: string;
        symbol: string;
        payees: string[];
        shares: BigNumberish[];
        typeOfNFT: BigNumberish;
        maxSupply: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "genNFTContract(address,(string,string,address[],uint256[],uint32,uint32))"(
      arg0: string,
      arg1: {
        name: string;
        symbol: string;
        payees: string[];
        shares: BigNumberish[];
        typeOfNFT: BigNumberish;
        maxSupply: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    slottingFee(overrides?: CallOverrides): Promise<BigNumber>;

    "slottingFee()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    genNFTContract(
      arg0: string,
      arg1: {
        name: string;
        symbol: string;
        payees: string[];
        shares: BigNumberish[];
        typeOfNFT: BigNumberish;
        maxSupply: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "genNFTContract(address,(string,string,address[],uint256[],uint32,uint32))"(
      arg0: string,
      arg1: {
        name: string;
        symbol: string;
        payees: string[];
        shares: BigNumberish[];
        typeOfNFT: BigNumberish;
        maxSupply: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    slottingFee(overrides?: CallOverrides): Promise<BigNumber>;

    "slottingFee()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    genNFTContract(
      arg0: string,
      arg1: {
        name: string;
        symbol: string;
        payees: string[];
        shares: BigNumberish[];
        typeOfNFT: BigNumberish;
        maxSupply: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "genNFTContract(address,(string,string,address[],uint256[],uint32,uint32))"(
      arg0: string,
      arg1: {
        name: string;
        symbol: string;
        payees: string[];
        shares: BigNumberish[];
        typeOfNFT: BigNumberish;
        maxSupply: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    slottingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "slottingFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
