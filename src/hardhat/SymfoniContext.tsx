/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { providers, Signer, ethers } from "ethers";
import React, { useEffect, useState } from "react";
import Web3Modal, { IProviderOptions } from "web3modal";
import NoobFriendlyTokenAdminDeployment from "./deployments/rinkeby/NoobFriendlyTokenAdmin.json";
import { NoobFriendlyTokenAdmin } from "./typechain/NoobFriendlyTokenAdmin";
import { NoobFriendlyTokenAdmin__factory } from "./typechain/factories/NoobFriendlyTokenAdmin__factory";
import { NFTBlindbox } from "./typechain/NFTBlindbox";
import { NFTBlindbox__factory } from "./typechain/factories/NFTBlindbox__factory";
import { NFTGallery } from "./typechain/NFTGallery";
import { NFTGallery__factory } from "./typechain/factories/NFTGallery__factory";
import NFTBlindboxGeneratorDeployment from "./deployments/rinkeby/NFTBlindboxGenerator.json";
import { NFTBlindboxGenerator } from "./typechain/NFTBlindboxGenerator";
import { NFTBlindboxGenerator__factory } from "./typechain/factories/NFTBlindboxGenerator__factory";
import { NFTTicket } from "./typechain/NFTTicket";
import { NFTTicket__factory } from "./typechain/factories/NFTTicket__factory";
import { NFTGalleryGenerator } from "./typechain/NFTGalleryGenerator";
import { NFTGalleryGenerator__factory } from "./typechain/factories/NFTGalleryGenerator__factory";
import { NFTTicketGenerator } from "./typechain/NFTTicketGenerator";
import { NFTTicketGenerator__factory } from "./typechain/factories/NFTTicketGenerator__factory";
import { PaymentSplitter } from "./typechain/PaymentSplitter";
import { PaymentSplitter__factory } from "./typechain/factories/PaymentSplitter__factory";
import { ERC721 } from "./typechain/ERC721";
import { ERC721__factory } from "./typechain/factories/ERC721__factory";

const emptyContract = {
    instance: undefined,
    factory: undefined
};
const defaultProvider: providers.Provider | undefined = undefined;
export const ProviderContext = React.createContext<[providers.Provider | undefined, React.Dispatch<React.SetStateAction<providers.Provider | undefined>>]>([defaultProvider, () => { }]);
const defaultCurrentAddress: string = "";
export const CurrentAddressContext = React.createContext<[string, React.Dispatch<React.SetStateAction<string>>]>([defaultCurrentAddress, () => { }]);
const defaultSigner: Signer | undefined = undefined;
export const SignerContext = React.createContext<[Signer | undefined, React.Dispatch<React.SetStateAction<Signer | undefined>>]>([defaultSigner, () => { }]);
const defaultSymfoniContext: SymfoniContextInterface = {
    currentHardhatProvider: "",
    init: () => { throw Error("Symfoni context not initialized") },
    loading: false,
    messages: [],
    providers: []
};
export const SymfoniContext = React.createContext<SymfoniContextInterface>(defaultSymfoniContext);
export const NoobFriendlyTokenAdminContext = React.createContext<SymfoniNoobFriendlyTokenAdmin>(emptyContract);
export const NFTBlindboxContext = React.createContext<SymfoniNFTBlindbox>(emptyContract);
export const NFTGalleryContext = React.createContext<SymfoniNFTGallery>(emptyContract);
export const NFTBlindboxGeneratorContext = React.createContext<SymfoniNFTBlindboxGenerator>(emptyContract);
export const NFTTicketContext = React.createContext<SymfoniNFTTicket>(emptyContract);
export const NFTGalleryGeneratorContext = React.createContext<SymfoniNFTGalleryGenerator>(emptyContract);
export const NFTTicketGeneratorContext = React.createContext<SymfoniNFTTicketGenerator>(emptyContract);
export const PaymentSplitterContext = React.createContext<SymfoniPaymentSplitter>(emptyContract);
export const ERC721Context = React.createContext<SymfoniERC721>(emptyContract);

export interface SymfoniContextInterface {
    init: (provider?: string) => void;
    loading: boolean;
    messages: string[];
    currentHardhatProvider: string;
    providers: string[];
}

export interface SymfoniProps {
    autoInit?: boolean;
    showLoading?: boolean;
    loadingComponent?: React.ReactNode;
}

export interface SymfoniNoobFriendlyTokenAdmin {
    instance?: NoobFriendlyTokenAdmin;
    factory?: NoobFriendlyTokenAdmin__factory;
}

export interface SymfoniNFTBlindbox {
    instance?: NFTBlindbox;
    factory?: NFTBlindbox__factory;
}

export interface SymfoniNFTGallery {
    instance?: NFTGallery;
    factory?: NFTGallery__factory;
}

export interface SymfoniNFTBlindboxGenerator {
    instance?: NFTBlindboxGenerator;
    factory?: NFTBlindboxGenerator__factory;
}

export interface SymfoniNFTTicket {
    instance?: NFTTicket;
    factory?: NFTTicket__factory;
}

export interface SymfoniNFTGalleryGenerator {
    instance?: NFTGalleryGenerator;
    factory?: NFTGalleryGenerator__factory;
}

export interface SymfoniNFTTicketGenerator {
    instance?: NFTTicketGenerator;
    factory?: NFTTicketGenerator__factory;
}

export interface SymfoniPaymentSplitter {
    instance?: PaymentSplitter;
    factory?: PaymentSplitter__factory;
}

export interface SymfoniERC721 {
    instance?: ERC721;
    factory?: ERC721__factory;
}

export const Symfoni: React.FC<SymfoniProps> = ({
    showLoading = true,
    autoInit = true,
    ...props
}) => {
    const [initializeCounter, setInitializeCounter] = useState(0);
    const [currentHardhatProvider, setCurrentHardhatProvider] = useState("");
    const [loading, setLoading] = useState(false);
    const [messages, setMessages] = useState<string[]>([]);
    const [signer, setSigner] = useState<Signer | undefined>(defaultSigner);
    const [provider, setProvider] = useState<providers.Provider | undefined>(defaultProvider);
    const [currentAddress, setCurrentAddress] = useState<string>(defaultCurrentAddress);
    const [fallbackProvider] = useState<string | undefined>(undefined);
    const [providerPriority, setProviderPriority] = useState<string[]>(["web3modal", "hardhat"]);
    const [NoobFriendlyTokenAdmin, setNoobFriendlyTokenAdmin] = useState<SymfoniNoobFriendlyTokenAdmin>(emptyContract);
    const [NFTBlindbox, setNFTBlindbox] = useState<SymfoniNFTBlindbox>(emptyContract);
    const [NFTGallery, setNFTGallery] = useState<SymfoniNFTGallery>(emptyContract);
    const [NFTBlindboxGenerator, setNFTBlindboxGenerator] = useState<SymfoniNFTBlindboxGenerator>(emptyContract);
    const [NFTTicket, setNFTTicket] = useState<SymfoniNFTTicket>(emptyContract);
    const [NFTGalleryGenerator, setNFTGalleryGenerator] = useState<SymfoniNFTGalleryGenerator>(emptyContract);
    const [NFTTicketGenerator, setNFTTicketGenerator] = useState<SymfoniNFTTicketGenerator>(emptyContract);
    const [PaymentSplitter, setPaymentSplitter] = useState<SymfoniPaymentSplitter>(emptyContract);
    const [ERC721, setERC721] = useState<SymfoniERC721>(emptyContract);
    useEffect(() => {
        if (messages.length > 0)
            console.debug(messages.pop())
    }, [messages])

    const getProvider = async (): Promise<{ provider: providers.Provider, hardhatProviderName: string } | undefined> => {
        let hardhatProviderName = "Not set";
        let _providerPriority = [...providerPriority];
        // Fallback provider
        if (fallbackProvider && autoInit && initializeCounter === 0) {
            if (localStorage.getItem("WEB3_CONNECT_CACHED_PROVIDER") === null) {
                _providerPriority = _providerPriority.sort((a, b) => {
                    return a === fallbackProvider ? -1 : b === fallbackProvider ? 1 : 0;
                })
            }
        }
        const provider = await _providerPriority.reduce(async (maybeProvider: Promise<providers.Provider | undefined>, providerIdentification) => {
            let foundProvider = await maybeProvider
            if (foundProvider) {
                return Promise.resolve(foundProvider)
            }
            else {
                switch (providerIdentification.toLowerCase()) {
                    case "web3modal":
                        try {
                            const provider = await getWeb3ModalProvider()
                            const web3provider = new ethers.providers.Web3Provider(provider);
                            hardhatProviderName = "web3modal";
                            return Promise.resolve(web3provider)
                        } catch (error) {
                            return Promise.resolve(undefined)
                        }
                    case "hardhat":
                        try {
                            const provider = new ethers.providers.JsonRpcProvider({
                                url: "http://127.0.0.1:8545",
                            });
                            hardhatProviderName = "hardhat";
                            return Promise.resolve(provider)
                        } catch (error) {
                            return Promise.resolve(undefined)
                        } default:
                        return Promise.resolve(undefined)
                }
            }
        }, Promise.resolve(undefined)) // end reduce
        return provider ? { provider, hardhatProviderName } : undefined
    };
    const getSigner = async (_provider: providers.Provider, hardhatProviderName: string): Promise<Signer | undefined> => {
        switch (hardhatProviderName) {
            case "web3modal":
                const web3provider = _provider as ethers.providers.Web3Provider
                return await web3provider.getSigner()
            case "hardhat":
                return ethers.Wallet.fromMnemonic("test test test test test test test test test test test junk").connect(_provider)
            default:
                return undefined
        }
    };
    const getWeb3ModalProvider = async (): Promise<any> => {
        const providerOptions: IProviderOptions = {

        };
        const web3Modal = new Web3Modal({
            // network: "mainnet",
            cacheProvider: false,
            providerOptions, // required
        });
        return await web3Modal.connect();
    };

    useEffect(() => {
        let subscribed = true
        const doAsync = async () => {
            const finish = (text: string) => {
                setLoading(false)
                setMessages(old => [...old, text])
            }
            const finishWithContracts = (text: string) => {
                setNoobFriendlyTokenAdmin(getNoobFriendlyTokenAdmin(_provider, _signer))
                setNFTBlindbox(getNFTBlindbox(_provider, _signer))
                setNFTGallery(getNFTGallery(_provider, _signer))
                setNFTBlindboxGenerator(getNFTBlindboxGenerator(_provider, _signer))
                setNFTTicket(getNFTTicket(_provider, _signer))
                setNFTGalleryGenerator(getNFTGalleryGenerator(_provider, _signer))
                setNFTTicketGenerator(getNFTTicketGenerator(_provider, _signer))
                setPaymentSplitter(getPaymentSplitter(_provider, _signer))
                setERC721(getERC721(_provider, _signer))
                finish(text)
            }
            if (!autoInit && initializeCounter === 0) return finish("Auto init turned off.")
            setLoading(true)
            setMessages(old => [...old, "Initiating Symfoni React"])
            const providerObject = await getProvider() // getProvider can actually return undefined, see issue https://github.com/microsoft/TypeScript/issues/11094

            if (!subscribed || !providerObject) return finish("No provider or signer.")
            const _provider = providerObject.provider
            setProvider(_provider)
            setMessages(old => [...old, "Useing " + providerObject.hardhatProviderName])
            setCurrentHardhatProvider(providerObject.hardhatProviderName)
            const _signer = await getSigner(_provider, providerObject.hardhatProviderName);

            if (!subscribed || !_signer) return finishWithContracts("Provider, without signer.")
            setSigner(_signer)
            setMessages(old => [...old, "Useing signer"])
            const address = await _signer.getAddress()

            if (!subscribed || !address) return finishWithContracts("Provider and signer, without address.")
            setCurrentAddress(address)

            return finishWithContracts("Completed Symfoni context initialization.")
        };
        doAsync();
        return () => { subscribed = false }
    }, [initializeCounter])

    const getNoobFriendlyTokenAdmin = (_provider: providers.Provider, _signer?: Signer) => {

        const contractAddress = NoobFriendlyTokenAdminDeployment.receipt.contractAddress
        const instance = _signer ? NoobFriendlyTokenAdmin__factory.connect(contractAddress, _signer) : NoobFriendlyTokenAdmin__factory.connect(contractAddress, _provider)
        const contract: SymfoniNoobFriendlyTokenAdmin = {
            instance: instance,
            factory: _signer ? new NoobFriendlyTokenAdmin__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getNFTBlindbox = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? NFTBlindbox__factory.connect(ethers.constants.AddressZero, _signer) : NFTBlindbox__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniNFTBlindbox = {
            instance: instance,
            factory: _signer ? new NFTBlindbox__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getNFTGallery = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? NFTGallery__factory.connect(ethers.constants.AddressZero, _signer) : NFTGallery__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniNFTGallery = {
            instance: instance,
            factory: _signer ? new NFTGallery__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getNFTBlindboxGenerator = (_provider: providers.Provider, _signer?: Signer) => {

        const contractAddress = NFTBlindboxGeneratorDeployment.receipt.contractAddress
        const instance = _signer ? NFTBlindboxGenerator__factory.connect(contractAddress, _signer) : NFTBlindboxGenerator__factory.connect(contractAddress, _provider)
        const contract: SymfoniNFTBlindboxGenerator = {
            instance: instance,
            factory: _signer ? new NFTBlindboxGenerator__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getNFTTicket = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? NFTTicket__factory.connect(ethers.constants.AddressZero, _signer) : NFTTicket__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniNFTTicket = {
            instance: instance,
            factory: _signer ? new NFTTicket__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getNFTGalleryGenerator = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? NFTGalleryGenerator__factory.connect(ethers.constants.AddressZero, _signer) : NFTGalleryGenerator__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniNFTGalleryGenerator = {
            instance: instance,
            factory: _signer ? new NFTGalleryGenerator__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getNFTTicketGenerator = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? NFTTicketGenerator__factory.connect(ethers.constants.AddressZero, _signer) : NFTTicketGenerator__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniNFTTicketGenerator = {
            instance: instance,
            factory: _signer ? new NFTTicketGenerator__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getPaymentSplitter = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? PaymentSplitter__factory.connect(ethers.constants.AddressZero, _signer) : PaymentSplitter__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniPaymentSplitter = {
            instance: instance,
            factory: _signer ? new PaymentSplitter__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC721 = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC721__factory.connect(ethers.constants.AddressZero, _signer) : ERC721__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC721 = {
            instance: instance,
            factory: _signer ? new ERC721__factory(_signer) : undefined,
        }
        return contract
    }
        ;

    const handleInitProvider = (provider?: string) => {
        if (provider) {
            setProviderPriority(old => old.sort((a, b) => {
                return a === provider ? -1 : b === provider ? 1 : 0;
            }))
        }
        setInitializeCounter(initializeCounter + 1)
    }
    return (
        <SymfoniContext.Provider value={{ init: (provider) => handleInitProvider(provider), providers: providerPriority, currentHardhatProvider, loading, messages }}>
            <ProviderContext.Provider value={[provider, setProvider]}>
                <SignerContext.Provider value={[signer, setSigner]}>
                    <CurrentAddressContext.Provider value={[currentAddress, setCurrentAddress]}>
                        <NoobFriendlyTokenAdminContext.Provider value={NoobFriendlyTokenAdmin}>
                            <NFTBlindboxContext.Provider value={NFTBlindbox}>
                                <NFTGalleryContext.Provider value={NFTGallery}>
                                    <NFTBlindboxGeneratorContext.Provider value={NFTBlindboxGenerator}>
                                        <NFTTicketContext.Provider value={NFTTicket}>
                                            <NFTGalleryGeneratorContext.Provider value={NFTGalleryGenerator}>
                                                <NFTTicketGeneratorContext.Provider value={NFTTicketGenerator}>
                                                    <PaymentSplitterContext.Provider value={PaymentSplitter}>
                                                        <ERC721Context.Provider value={ERC721}>
                                                            {showLoading && loading ?
                                                                props.loadingComponent
                                                                    ? props.loadingComponent
                                                                    : <div>
                                                                        {messages.map((msg, i) => (
                                                                            <p key={i}>{msg}</p>
                                                                        ))}
                                                                    </div>
                                                                : props.children
                                                            }
                                                        </ERC721Context.Provider >
                                                    </PaymentSplitterContext.Provider >
                                                </NFTTicketGeneratorContext.Provider >
                                            </NFTGalleryGeneratorContext.Provider >
                                        </NFTTicketContext.Provider >
                                    </NFTBlindboxGeneratorContext.Provider >
                                </NFTGalleryContext.Provider >
                            </NFTBlindboxContext.Provider >
                        </NoobFriendlyTokenAdminContext.Provider >
                    </CurrentAddressContext.Provider>
                </SignerContext.Provider>
            </ProviderContext.Provider>
        </SymfoniContext.Provider>
    )

};
