{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adminAddr_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "slottingFee_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "adminAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "client",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "address[]",
              "name": "payees",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "shares",
              "type": "uint256[]"
            },
            {
              "internalType": "uint32",
              "name": "typeOfNFT",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "maxSupply",
              "type": "uint32"
            }
          ],
          "internalType": "struct BaseSettings",
          "name": "baseSettings",
          "type": "tuple"
        }
      ],
      "name": "genNFTContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slottingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newSlottingFee",
          "type": "uint256"
        }
      ],
      "name": "updateSlottingFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5d54de648bd1ecf900e1b7852dcc00048ccb1897d0cb01e55c3bef4d176e4498",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "3249180",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000100000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000001000000000002000000000000000000020000000000000000000000000000000000000000000000000800000000000000000",
    "blockHash": "0xe89fc3d5273ba6df54757dd36be4ca69de995e76b832c7f113ee0cf1917e0f39",
    "transactionHash": "0x5d54de648bd1ecf900e1b7852dcc00048ccb1897d0cb01e55c3bef4d176e4498",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x5d54de648bd1ecf900e1b7852dcc00048ccb1897d0cb01e55c3bef4d176e4498",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe89fc3d5273ba6df54757dd36be4ca69de995e76b832c7f113ee0cf1917e0f39"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "3249180",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "300000000000000000"
  ],
  "solcInputHash": "bf6513ca19f44837d7ae9c3aa294479c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddr_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slottingFee_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adminAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32\",\"name\":\"typeOfNFT\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxSupply\",\"type\":\"uint32\"}],\"internalType\":\"struct BaseSettings\",\"name\":\"baseSettings\",\"type\":\"tuple\"}],\"name\":\"genNFTContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slottingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSlottingFee\",\"type\":\"uint256\"}],\"name\":\"updateSlottingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"genNFTContract(address,(string,string,address[],uint256[],uint32,uint32))\":{\"params\":{\"baseSettings\":\"See BaseSettings in ./NoobFriendlyTokenTemplate.sol\",\"client\":\"User who want to generate an NFT contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateSlottingFee(uint256)\":{\"details\":\"Update slotting fee\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"adminAddr()\":{\"notice\":\"Admin contract address\"},\"genNFTContract(address,(string,string,address[],uint256[],uint32,uint32))\":{\"notice\":\"Generate NFT contract for user\"},\"slottingFee()\":{\"notice\":\"Slotting fee of generate one NFT contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Generator/NFTTicketGenerator.sol\":\"NFTTicketGenerator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/finance/PaymentSplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n */\\ncontract PaymentSplitter is Context {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n\\n    mapping(address => uint256) private _shares;\\n    mapping(address => uint256) private _released;\\n    address[] private _payees;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    constructor(address[] memory payees, uint256[] memory shares_) payable {\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = address(this).balance + _totalReleased;\\n        uint256 payment = (totalReceived * _shares[account]) / _totalShares - _released[account];\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _released[account] = _released[account] + payment;\\n        _totalReleased = _totalReleased + payment;\\n\\n        Address.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) private {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n}\\n\",\"keccak256\":\"0x5b5c64239a7980f0c2c5baa584a3350912c7260db32f6d6544a2755f59a0c488\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/Generator/NFTTicketGenerator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../NoobFriendlyTokenGenerator.sol\\\";\\r\\n\\r\\ncontract NFTTicket is NoobFriendlyTokenTemplate {\\r\\n\\r\\n    using Strings for uint8;\\r\\n\\r\\n    struct TicketState {\\r\\n        uint48[] current;\\r\\n        uint48[] soldout;\\r\\n        uint160[] prices;\\r\\n    }\\r\\n\\r\\n    TicketState private _ticketState;\\r\\n\\r\\n    constructor(\\r\\n        BaseSettings memory baseSettings\\r\\n    )\\r\\n        ERC721(baseSettings.name, baseSettings.symbol)\\r\\n        PaymentSplitter(baseSettings.payees, baseSettings.shares)\\r\\n        NoobFriendlyTokenTemplate(baseSettings.typeOfNFT, baseSettings.maxSupply)\\r\\n    {}\\r\\n\\r\\n    function initialize(\\r\\n        string calldata baseURI_,\\r\\n        uint128 startTimestamp_,\\r\\n        uint48[] calldata ticketAmounts_,\\r\\n        uint160[] calldata ticketPrices_\\r\\n    ) external onlyOwner onlyOnce {\\r\\n        uint length = ticketAmounts_.length;\\r\\n        require(\\r\\n            length == ticketPrices_.length && length > 0 && length <= 256,\\r\\n            \\\"Ticket: level error\\\"\\r\\n        );\\r\\n        uint48 cumulation = 0;\\r\\n        for (uint8 lv = 0; lv < length; lv++) {\\r\\n            _ticketState.current.push(cumulation);\\r\\n            cumulation += ticketAmounts_[lv];\\r\\n            _ticketState.soldout.push(cumulation);\\r\\n            _ticketState.prices.push(ticketPrices_[lv]);\\r\\n        }\\r\\n        require(\\r\\n            cumulation == settings.maxSupply,\\r\\n            \\\"Ticket: sum of supply of each level not match\\\"\\r\\n        );\\r\\n        baseURI = baseURI_;\\r\\n        settings.startTimestamp = startTimestamp_;\\r\\n    }\\r\\n\\r\\n    function mintToken(uint8[] calldata levels, uint[] calldata ticketNum) external payable {\\r\\n        require(\\r\\n            isInit,\\r\\n            \\\"Ticket: not initialized\\\"\\r\\n        );\\r\\n        require(\\r\\n            block.timestamp > settings.startTimestamp,\\r\\n            \\\"Ticket: sale not start\\\"\\r\\n        );\\r\\n\\r\\n        uint totalPayable = 0;\\r\\n\\r\\n        for( uint8 i = 0; i < levels.length; i++){\\r\\n\\r\\n            uint8 level = levels[i];\\r\\n\\r\\n            require(\\r\\n                level < _ticketState.prices.length,\\r\\n                \\\"Ticket: no such level\\\");\\r\\n            uint256 newTicketId = _ticketState.current[level] + ticketNum[i] - 1;\\r\\n            require(\\r\\n                newTicketId < _ticketState.soldout[level],\\r\\n                \\\"Ticket: sold out at this level\\\"  \\r\\n            );\\r\\n\\r\\n            totalPayable += _ticketState.prices[level]*ticketNum[i];\\r\\n            require(\\r\\n                msg.value >= totalPayable,\\r\\n                \\\"Ticket: not enough for ticket price\\\"    \\r\\n            );\\r\\n        }\\r\\n\\r\\n        for( uint i = 0; i < levels.length; i++){\\r\\n            \\r\\n            uint level = levels[i];\\r\\n\\r\\n            for( uint j = 0; j < ticketNum[i]; j++){\\r\\n                uint48 newTicketId = _ticketState.current[level];\\r\\n                _ticketState.current[level] += 1;\\r\\n                _safeMint(_msgSender(), uint(newTicketId));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint ticketId) public override view returns (string memory uri) {\\r\\n        require(\\r\\n            _exists(ticketId),\\r\\n            \\\"Ticket: query for non-existing ticket\\\"\\r\\n        );\\r\\n        uint length = _ticketState.soldout.length;\\r\\n        for (uint8 lv = 0; lv < length; lv++) {\\r\\n            if (ticketId < _ticketState.soldout[lv]) {\\r\\n                return string(abi.encodePacked(baseURI, lv.toString()));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract NFTTicketGenerator is NoobFriendlyTokenGenerator {\\r\\n    \\r\\n    constructor(address adminAddr_, uint slottingFee_)\\r\\n        NoobFriendlyTokenGenerator(adminAddr_, slottingFee_)\\r\\n    {}\\r\\n\\r\\n    function _genContract(BaseSettings calldata baseSettings)\\r\\n        internal override returns (address) {\\r\\n        return address(new NFTTicket(baseSettings));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8f3bc58048d3c9c43c88db6325a169de89af43f225a9707336c17c7f59e02251\",\"license\":\"MIT\"},\"contracts/NoobFriendlyTokenGenerator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./NoobFriendlyTokenTemplate.sol\\\";\\n\\n/**\\n @author Justa Liang\\n @notice Template of NFT contract generator\\n */\\nabstract contract NoobFriendlyTokenGenerator is Ownable, GeneratorInterface {\\n\\n    /// @notice Admin contract address\\n    address public adminAddr;\\n\\n    /// @notice Slotting fee of generate one NFT contract\\n    uint public override slottingFee;\\n\\n    /// @dev Setup slotting fee, and point to admin contract\\n    constructor(\\n        address adminAddr_,\\n        uint slottingFee_\\n    ) {\\n        adminAddr = adminAddr_;\\n        slottingFee = slottingFee_;\\n    }\\n    \\n    /// @dev Should implement _genContract() in every generator\\n    function _genContract(\\n        BaseSettings calldata baseSettings\\n    ) internal virtual returns (address);\\n\\n    /**\\n     @notice Generate NFT contract for user\\n     @param client User who want to generate an NFT contract\\n     @param baseSettings See BaseSettings in ./NoobFriendlyTokenTemplate.sol\\n     */\\n    function genNFTContract(\\n        address client,\\n        BaseSettings calldata baseSettings\\n    ) external override returns (address) {\\n        require(_msgSender() == adminAddr);\\n        address contractAddr =  _genContract(baseSettings);\\n        TemplateInterface nftContract = TemplateInterface(contractAddr);\\n        nftContract.transferOwnership(client);\\n        return contractAddr;\\n    }\\n\\n    /// @dev Update slotting fee\\n    function updateSlottingFee(\\n        uint newSlottingFee\\n    ) external onlyOwner {\\n        slottingFee = newSlottingFee;\\n    }\\n} \",\"keccak256\":\"0xdcb9fef4b872d8bfb4be3134b926331595b5aac7ea5b8ee8d1aef92aa60b43a6\",\"license\":\"MIT\"},\"contracts/NoobFriendlyTokenTemplate.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/finance/PaymentSplitter.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\n\\r\\nstruct BaseSettings {\\r\\n    string name;\\r\\n    string symbol;\\r\\n    address[] payees;\\r\\n    uint[] shares;\\r\\n    uint32 typeOfNFT;\\r\\n    uint32 maxSupply;\\r\\n}\\r\\n\\r\\nstruct BaseSettingsInfo {\\r\\n    string name;\\r\\n    string symbol;\\r\\n    uint32 typeOfNFT;\\r\\n    uint32 maxSupply;    \\r\\n}\\r\\n\\r\\ninterface GeneratorInterface {\\r\\n    function slottingFee() external view returns (uint);\\r\\n    function genNFTContract(address, BaseSettings calldata) external returns (address);\\r\\n}\\r\\n\\r\\ninterface TemplateInterface {\\r\\n    function owner() external returns (address);\\r\\n    function transferOwnership(address newOwner) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n @author Justa Liang\\r\\n @notice Template of NFT contract\\r\\n */\\r\\nabstract contract NoobFriendlyTokenTemplate is Ownable, PaymentSplitter, ERC721 {\\r\\n\\r\\n    struct Settings {\\r\\n        uint32 maxSupply;\\r\\n        uint32 totalSupply;\\r\\n        uint32 maxPurchase;\\r\\n        uint32 typeOfNFT;\\r\\n        uint128 startTimestamp;\\r\\n    }\\r\\n\\r\\n    /// @notice Template settings\\r\\n    Settings public settings;\\r\\n    \\r\\n    /// @notice Prefix of tokenURI\\r\\n    string public baseURI;\\r\\n\\r\\n    /// @notice Whether contract is initialized\\r\\n    bool public isInit;\\r\\n\\r\\n    /// @dev Setup type and max supply \\r\\n    constructor(\\r\\n        uint32 typeOfNFT_,\\r\\n        uint32 maxSupply_\\r\\n    ) {\\r\\n        settings.typeOfNFT = typeOfNFT_;\\r\\n        settings.maxSupply = maxSupply_;\\r\\n        isInit = false;\\r\\n    }\\r\\n\\r\\n    /// @dev Make the contract to initialized only once\\r\\n    modifier onlyOnce() {\\r\\n        require(!isInit, \\\"init already\\\");\\r\\n        isInit = true;\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Mint token with ID exceeding max supply\\r\\n    function specialMint(\\r\\n        address recevier,\\r\\n        uint tokenId\\r\\n    ) external onlyOwner {\\r\\n        require(\\r\\n            tokenId > settings.maxSupply,\\r\\n            \\\"special mint error\\\"\\r\\n        );\\r\\n        _safeMint(recevier, tokenId);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xbd36c567a57c874fd9ac0c8f469c224c9c2838e92a05cc73a039b4260c7145b6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161398a38038061398a83398101604081905261002f916100b6565b818161003a33610066565b600180546001600160a01b0319166001600160a01b039390931692909217909155600255506100ee9050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080604083850312156100c8578182fd5b82516001600160a01b03811681146100de578283fd5b6020939093015192949293505050565b61388d806100fd6000396000f3fe60806040523480156200001157600080fd5b5060043610620000765760003560e01c80632e20f03f146200007b578063715018a6146200009457806381830593146200009e5780638da5cb5b14620000ca578063e962371314620000d4578063ea88a3b814620000eb578063f2fde38b1462000104575b600080fd5b620000926200008c36600462000444565b6200011b565b005b620000926200015d565b600154620000b2906001600160a01b031681565b604051620000c19190620004bb565b60405180910390f35b620000b26200019f565b620000b2620000e5366004620003ed565b620001ae565b620000f560025481565b604051908152602001620000c1565b6200009262000115366004620003c9565b6200024f565b33620001266200019f565b6001600160a01b031614620001585760405162461bcd60e51b81526004016200014f90620004cf565b60405180910390fd5b600255565b33620001686200019f565b6001600160a01b031614620001915760405162461bcd60e51b81526004016200014f90620004cf565b6200019d6000620002f8565b565b6000546001600160a01b031690565b6001546000906001600160a01b0316336001600160a01b031614620001d257600080fd5b6000620001df8362000348565b60405163f2fde38b60e01b815290915081906001600160a01b0382169063f2fde38b9062000212908890600401620004bb565b600060405180830381600087803b1580156200022d57600080fd5b505af115801562000242573d6000803e3d6000fd5b5093979650505050505050565b336200025a6200019f565b6001600160a01b031614620002835760405162461bcd60e51b81526004016200014f90620004cf565b6001600160a01b038116620002ea5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200014f565b620002f581620002f8565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081604051620003599062000389565b62000365919062000504565b604051809103906000f08015801562000382573d6000803e3d6000fd5b5092915050565b61319c80620006bc83390190565b80356001600160a01b0381168114620003af57600080fd5b919050565b803563ffffffff81168114620003af57600080fd5b600060208284031215620003db578081fd5b620003e68262000397565b9392505050565b6000806040838503121562000400578081fd5b6200040b8362000397565b9150602083013567ffffffffffffffff81111562000427578182fd5b830160c0818603121562000439578182fd5b809150509250929050565b60006020828403121562000456578081fd5b5035919050565b81835260006001600160fb1b0383111562000476578081fd5b8260051b80836020870137939093016020019283525090919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0391909116815260200190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602080835262000517848562000673565b60c0838601526200052d60e08601828462000492565b9150506200053e8286018662000673565b601f19808785030160408801526200055884838562000492565b935062000569604089018962000621565b888603830160608a0152808652909490935086925085015b83831015620005b3576001600160a01b036200059d8662000397565b1681529385019360019290920191850162000581565b620005c260608a018a62000621565b9650945081888203016080890152620005dd8187876200045d565b95505050505050620005f260808501620003b4565b63ffffffff811660a0850152506200060d60a08501620003b4565b63ffffffff811660c0850152509392505050565b6000808335601e1984360301811262000638578283fd5b830160208101925035905067ffffffffffffffff8111156200065957600080fd5b8060051b36038313156200066c57600080fd5b9250929050565b6000808335601e198436030181126200068a578283fd5b830160208101925035905067ffffffffffffffff811115620006ab57600080fd5b8036038313156200066c57600080fdfe60806040523480156200001157600080fd5b506040516200319c3803806200319c8339810160408190526200003491620006a1565b608081015160a082015182516020840151604085015160608601516200005a3362000223565b8051825114620000cc5760405162461bcd60e51b815260206004820152603260248201527f5061796d656e7453706c69747465723a2070617965657320616e6420736861726044820152710cae640d8cadccee8d040dad2e6dac2e8c6d60731b60648201526084015b60405180910390fd5b60008251116200011f5760405162461bcd60e51b815260206004820152601a60248201527f5061796d656e7453706c69747465723a206e6f207061796565730000000000006044820152606401620000c3565b60005b8251811015620001a3576200018e8382815181106200015157634e487b7160e01b600052603260045260246000fd5b60200260200101518383815181106200017a57634e487b7160e01b600052603260045260246000fd5b60200260200101516200027360201b60201c565b806200019a8162000885565b91505062000122565b50508251620001bb9150600690602085019062000460565b508051620001d190600790602084019062000460565b5050600c805463ffffffff63ffffffff60601b0119166c0100000000000000000000000063ffffffff9586160263ffffffff19161792909316919091179091555050600e805460ff19169055620008cf565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038216620002e05760405162461bcd60e51b815260206004820152602c60248201527f5061796d656e7453706c69747465723a206163636f756e74206973207468652060448201526b7a65726f206164647265737360a01b6064820152608401620000c3565b60008111620003325760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e7453706c69747465723a207368617265732061726520300000006044820152606401620000c3565b6001600160a01b03821660009081526003602052604090205415620003ae5760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960448201526a206861732073686172657360a81b6064820152608401620000c3565b6005805460018082019092557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b038516908117909155600090815260036020526040902082905554620004179082906200082d565b600155604080516001600160a01b0384168152602081018390527f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac910160405180910390a15050565b8280546200046e9062000848565b90600052602060002090601f016020900481019282620004925760008555620004dd565b82601f10620004ad57805160ff1916838001178555620004dd565b82800160010185558215620004dd579182015b82811115620004dd578251825591602001919060010190620004c0565b50620004eb929150620004ef565b5090565b5b80821115620004eb5760008155600101620004f0565b600082601f83011262000517578081fd5b81516020620005306200052a8362000807565b620007d4565b80838252828201915082860187848660051b890101111562000550578586fd5b855b85811015620005855781516001600160a01b038116811462000572578788fd5b8452928401929084019060010162000552565b5090979650505050505050565b600082601f830112620005a3578081fd5b81516020620005b66200052a8362000807565b80838252828201915082860187848660051b8901011115620005d6578586fd5b855b858110156200058557815184529284019290840190600101620005d8565b600082601f83011262000607578081fd5b81516001600160401b03811115620006235762000623620008b9565b602062000639601f8301601f19168201620007d4565b82815285828487010111156200064d578384fd5b835b838110156200066c5785810183015182820184015282016200064f565b838111156200067d57848385840101525b5095945050505050565b805163ffffffff811681146200069c57600080fd5b919050565b600060208284031215620006b3578081fd5b81516001600160401b0380821115620006ca578283fd5b9083019060c08286031215620006de578283fd5b620006e8620007a9565b825182811115620006f7578485fd5b6200070587828601620005f6565b8252506020830151828111156200071a578485fd5b6200072887828601620005f6565b60208301525060408301518281111562000740578485fd5b6200074e8782860162000506565b60408301525060608301518281111562000766578485fd5b620007748782860162000592565b606083015250620007886080840162000687565b60808201526200079b60a0840162000687565b60a082015295945050505050565b60405160c081016001600160401b0381118282101715620007ce57620007ce620008b9565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620007ff57620007ff620008b9565b604052919050565b60006001600160401b03821115620008235762000823620008b9565b5060051b60200190565b60008219821115620008435762000843620008a3565b500190565b600181811c908216806200085d57607f821691505b602082108114156200087f57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156200089c576200089c620008a3565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6128bd80620008df6000396000f3fe60806040526004361061015b5760003560e01c8063715018a6116100bc578063715018a6146103785780638b83209b1461038d5780638da5cb5b146103ad57806395d89b41146103c25780639852595c146103d7578063a22cb4651461040d578063b145a5b81461042d578063b88d4fde14610447578063c87b56dd14610467578063ce7c2ac214610487578063e06174e4146104bd578063e33b7de31461054d578063e985e9c514610562578063f2fde38b1461058257600080fd5b806301ffc9a7146101a057806306fdde03146101d5578063081812fc146101f7578063095ea7b31461022f578063191655871461025157806323b872dd146102715780633a98ef391461029157806342842e0e146102b0578063445e6058146102d05780636352211e146102f05780636456c30f146103105780636c0360eb146103235780636fecc2491461033857806370a082311461035857600080fd5b3661019b577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be7703334604051610191929190612597565b60405180910390a1005b600080fd5b3480156101ac57600080fd5b506101c06101bb366004612341565b6105a2565b60405190151581526020015b60405180910390f35b3480156101e157600080fd5b506101ea6105f4565b6040516101cc91906125ed565b34801561020357600080fd5b5061021761021236600461244a565b610686565b6040516001600160a01b0390911681526020016101cc565b34801561023b57600080fd5b5061024f61024a3660046122ae565b610713565b005b34801561025d57600080fd5b5061024f61026c36600461210a565b610824565b34801561027d57600080fd5b5061024f61028c366004612165565b6109ec565b34801561029d57600080fd5b506001545b6040519081526020016101cc565b3480156102bc57600080fd5b5061024f6102cb366004612165565b610a1d565b3480156102dc57600080fd5b5061024f6102eb366004612379565b610a38565b3480156102fc57600080fd5b5061021761030b36600461244a565b610d4a565b61024f61031e3660046122d9565b610dc1565b34801561032f57600080fd5b506101ea6112ba565b34801561034457600080fd5b5061024f6103533660046122ae565b611348565b34801561036457600080fd5b506102a261037336600461210a565b6113d1565b34801561038457600080fd5b5061024f611458565b34801561039957600080fd5b506102176103a836600461244a565b611493565b3480156103b957600080fd5b506102176114d1565b3480156103ce57600080fd5b506101ea6114e0565b3480156103e357600080fd5b506102a26103f236600461210a565b6001600160a01b031660009081526004602052604090205490565b34801561041957600080fd5b5061024f61042836600461227d565b6114ef565b34801561043957600080fd5b50600e546101c09060ff1681565b34801561045357600080fd5b5061024f6104623660046121a5565b6115b0565b34801561047357600080fd5b506101ea61048236600461244a565b6115e8565b34801561049357600080fd5b506102a26104a236600461210a565b6001600160a01b031660009081526003602052604090205490565b3480156104c957600080fd5b50600c5461050d9063ffffffff808216916401000000008104821691600160401b8204811691600160601b810490911690600160801b90046001600160801b031685565b6040805163ffffffff968716815294861660208601529285169284019290925290921660608201526001600160801b03909116608082015260a0016101cc565b34801561055957600080fd5b506002546102a2565b34801561056e57600080fd5b506101c061057d36600461212d565b61170a565b34801561058e57600080fd5b5061024f61059d36600461210a565b611738565b60006001600160e01b031982166380ac58cd60e01b14806105d357506001600160e01b03198216635b5e139f60e01b145b806105ee57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606006805461060390612790565b80601f016020809104026020016040519081016040528092919081815260200182805461062f90612790565b801561067c5780601f106106515761010080835404028352916020019161067c565b820191906000526020600020905b81548152906001019060200180831161065f57829003601f168201915b5050505050905090565b6000610691826117d8565b6106f75760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600a60205260409020546001600160a01b031690565b600061071e82610d4a565b9050806001600160a01b0316836001600160a01b0316141561078c5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016106ee565b336001600160a01b03821614806107a857506107a8813361170a565b6108155760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b60648201526084016106ee565b61081f83836117f5565b505050565b6001600160a01b0381166000908152600360205260409020546108985760405162461bcd60e51b815260206004820152602660248201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060448201526573686172657360d01b60648201526084016106ee565b6000600254476108a891906126d8565b6001600160a01b03831660009081526004602090815260408083205460015460039093529083205493945091926108df908561272e565b6108e9919061271a565b6108f3919061274d565b9050806109565760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060448201526a191d59481c185e5b595b9d60aa1b60648201526084016106ee565b6001600160a01b03831660009081526004602052604090205461097a9082906126d8565b6001600160a01b0384166000908152600460205260409020556002546109a19082906126d8565b6002556109ae8382611863565b7fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b05683826040516109df929190612597565b60405180910390a1505050565b6109f63382611979565b610a125760405162461bcd60e51b81526004016106ee90612687565b61081f838383611a43565b61081f838383604051806020016040528060008152506115b0565b33610a416114d1565b6001600160a01b031614610a675760405162461bcd60e51b81526004016106ee90612652565b600e5460ff1615610aa95760405162461bcd60e51b815260206004820152600c60248201526b696e697420616c726561647960a01b60448201526064016106ee565b600e805460ff19166001179055828181148015610ac65750600081115b8015610ad457506101008111155b610b165760405162461bcd60e51b81526020600482015260136024820152722a34b1b5b2ba1d103632bb32b61032b93937b960691b60448201526064016106ee565b6000805b828160ff161015610c9f57600f80546001810182556000919091527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8026005808304919091018054919092066006026101000a65ffffffffffff8181021990921691851602179055868660ff8316818110610ba457634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610bb99190612462565b610bc390836126f0565b601080546001810182556000919091527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6726005808304919091018054919092066006026101000a65ffffffffffff818102199092169184160217905591506011858560ff8416818110610c4657634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610c5b919061210a565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b0390921691909117905580610c97816127e6565b915050610b1a565b50600c5463ffffffff1665ffffffffffff821614610d155760405162461bcd60e51b815260206004820152602d60248201527f5469636b65743a2073756d206f6620737570706c79206f662065616368206c6560448201526c0eccad840dcdee840dac2e8c6d609b1b60648201526084016106ee565b610d21600d8a8a61200c565b5050600c80546001600160801b03978816600160801b0297169690961790955550505050505050565b6000818152600860205260408120546001600160a01b0316806105ee5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016106ee565b600e5460ff16610e0d5760405162461bcd60e51b8152602060048201526017602482015276151a58dad95d0e881b9bdd081a5b9a5d1a585b1a5e9959604a1b60448201526064016106ee565b600c54600160801b90046001600160801b03164211610e675760405162461bcd60e51b8152602060048201526016602482015275151a58dad95d0e881cd85b19481b9bdd081cdd185c9d60521b60448201526064016106ee565b6000805b60ff811685111561112c57600086868360ff16818110610e9b57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610eb09190612488565b60115490915060ff821610610eff5760405162461bcd60e51b8152602060048201526015602482015274151a58dad95d0e881b9bc81cdd58da081b195d995b605a1b60448201526064016106ee565b6000600186868560ff16818110610f2657634e487b7160e01b600052603260045260246000fd5b90506020020135600f6000018460ff1681548110610f5457634e487b7160e01b600052603260045260246000fd5b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff16610f8e91906126d8565b610f98919061274d565b9050600f6001018260ff1681548110610fc157634e487b7160e01b600052603260045260246000fd5b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff16811061103f5760405162461bcd60e51b815260206004820152601e60248201527f5469636b65743a20736f6c64206f75742061742074686973206c6576656c000060448201526064016106ee565b85858460ff1681811061106257634e487b7160e01b600052603260045260246000fd5b90506020020135600f6002018360ff168154811061109057634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546110af91906001600160a01b031661272e565b6110b990856126d8565b9350833410156111175760405162461bcd60e51b815260206004820152602360248201527f5469636b65743a206e6f7420656e6f75676820666f72207469636b657420707260448201526269636560e81b60648201526084016106ee565b50508080611124906127e6565b915050610e6b565b5060005b848110156112b257600086868381811061115a57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061116f9190612488565b60ff16905060005b85858481811061119757634e487b7160e01b600052603260045260246000fd5b9050602002013581101561129d576000600f60000183815481106111cb57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff1690506001600f600001848154811061121b57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600591828204019190066006028282829054906101000a900465ffffffffffff1661125091906126f0565b92506101000a81548165ffffffffffff021916908365ffffffffffff16021790555061128a61127c3390565b8265ffffffffffff16611be3565b5080611295816127cb565b915050611177565b505080806112aa906127cb565b915050611130565b505050505050565b600d80546112c790612790565b80601f01602080910402602001604051908101604052809291908181526020018280546112f390612790565b80156113405780601f1061131557610100808354040283529160200191611340565b820191906000526020600020905b81548152906001019060200180831161132357829003601f168201915b505050505081565b336113516114d1565b6001600160a01b0316146113775760405162461bcd60e51b81526004016106ee90612652565b600c5463ffffffff1681116113c35760405162461bcd60e51b815260206004820152601260248201527139b832b1b4b0b61036b4b73a1032b93937b960711b60448201526064016106ee565b6113cd8282611be3565b5050565b60006001600160a01b03821661143c5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016106ee565b506001600160a01b031660009081526009602052604090205490565b336114616114d1565b6001600160a01b0316146114875760405162461bcd60e51b81526004016106ee90612652565b6114916000611bfd565b565b6000600582815481106114b657634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031692915050565b6000546001600160a01b031690565b60606007805461060390612790565b6001600160a01b0382163314156115445760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b60448201526064016106ee565b336000818152600b602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6115ba3383611979565b6115d65760405162461bcd60e51b81526004016106ee90612687565b6115e284848484611c4d565b50505050565b60606115f3826117d8565b61164d5760405162461bcd60e51b815260206004820152602560248201527f5469636b65743a20717565727920666f72206e6f6e2d6578697374696e6720746044820152641a58dad95d60da1b60648201526084016106ee565b60105460005b818160ff161015611703576010805460ff831690811061168357634e487b7160e01b600052603260045260246000fd5b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff168410156116f157600d6116c88260ff16611c80565b6040516020016116d99291906124f1565b60405160208183030381529060405292505050919050565b806116fb816127e6565b915050611653565b5050919050565b6001600160a01b039182166000908152600b6020908152604080832093909416825291909152205460ff1690565b336117416114d1565b6001600160a01b0316146117675760405162461bcd60e51b81526004016106ee90612652565b6001600160a01b0381166117cc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106ee565b6117d581611bfd565b50565b6000908152600860205260409020546001600160a01b0316151590565b6000818152600a6020526040902080546001600160a01b0319166001600160a01b038416908117909155819061182a82610d4a565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b804710156118b35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016106ee565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611900576040519150601f19603f3d011682016040523d82523d6000602084013e611905565b606091505b505090508061081f5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b60648201526084016106ee565b6000611984826117d8565b6119e55760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016106ee565b60006119f083610d4a565b9050806001600160a01b0316846001600160a01b03161480611a2b5750836001600160a01b0316611a2084610686565b6001600160a01b0316145b80611a3b5750611a3b818561170a565b949350505050565b826001600160a01b0316611a5682610d4a565b6001600160a01b031614611abe5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016106ee565b6001600160a01b038216611b205760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106ee565b611b2b6000826117f5565b6001600160a01b0383166000908152600960205260408120805460019290611b5490849061274d565b90915550506001600160a01b0382166000908152600960205260408120805460019290611b829084906126d8565b909155505060008181526008602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6113cd828260405180602001604052806000815250611d99565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611c58848484611a43565b611c6484848484611dcc565b6115e25760405162461bcd60e51b81526004016106ee90612600565b606081611ca45750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611cce5780611cb8816127cb565b9150611cc79050600a8361271a565b9150611ca8565b6000816001600160401b03811115611cf657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611d20576020820181803683370190505b5090505b8415611a3b57611d3560018361274d565b9150611d42600a86612806565b611d4d9060306126d8565b60f81b818381518110611d7057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611d92600a8661271a565b9450611d24565b611da38383611ed9565b611db06000848484611dcc565b61081f5760405162461bcd60e51b81526004016106ee90612600565b60006001600160a01b0384163b15611ece57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611e109033908990889088906004016125b0565b602060405180830381600087803b158015611e2a57600080fd5b505af1925050508015611e5a575060408051601f3d908101601f19168201909252611e579181019061235d565b60015b611eb4573d808015611e88576040519150601f19603f3d011682016040523d82523d6000602084013e611e8d565b606091505b508051611eac5760405162461bcd60e51b81526004016106ee90612600565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611a3b565b506001949350505050565b6001600160a01b038216611f2f5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106ee565b611f38816117d8565b15611f855760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106ee565b6001600160a01b0382166000908152600960205260408120805460019290611fae9084906126d8565b909155505060008181526008602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b82805461201890612790565b90600052602060002090601f01602090048101928261203a5760008555612080565b82601f106120535782800160ff19823516178555612080565b82800160010185558215612080579182015b82811115612080578235825591602001919060010190612065565b5061208c929150612090565b5090565b5b8082111561208c5760008155600101612091565b60008083601f8401126120b6578081fd5b5081356001600160401b038111156120cc578182fd5b6020830191508360208260051b85010111156120e757600080fd5b9250929050565b80356001600160801b038116811461210557600080fd5b919050565b60006020828403121561211b578081fd5b81356121268161285c565b9392505050565b6000806040838503121561213f578081fd5b823561214a8161285c565b9150602083013561215a8161285c565b809150509250929050565b600080600060608486031215612179578081fd5b83356121848161285c565b925060208401356121948161285c565b929592945050506040919091013590565b600080600080608085870312156121ba578081fd5b84356121c58161285c565b935060208501356121d58161285c565b92506040850135915060608501356001600160401b03808211156121f7578283fd5b818701915087601f83011261220a578283fd5b81358181111561221c5761221c612846565b604051601f8201601f19908116603f0116810190838211818310171561224457612244612846565b816040528281528a602084870101111561225c578586fd5b82602086016020830137918201602001949094529598949750929550505050565b6000806040838503121561228f578182fd5b823561229a8161285c565b91506020830135801515811461215a578182fd5b600080604083850312156122c0578182fd5b82356122cb8161285c565b946020939093013593505050565b600080600080604085870312156122ee578384fd5b84356001600160401b0380821115612304578586fd5b612310888389016120a5565b90965094506020870135915080821115612328578384fd5b50612335878288016120a5565b95989497509550505050565b600060208284031215612352578081fd5b813561212681612871565b60006020828403121561236e578081fd5b815161212681612871565b60008060008060008060006080888a031215612393578485fd5b87356001600160401b03808211156123a9578687fd5b818a0191508a601f8301126123bc578687fd5b8135818111156123ca578788fd5b8b60208285010111156123db578788fd5b602083019950809850506123f160208b016120ee565b965060408a0135915080821115612406578485fd5b6124128b838c016120a5565b909650945060608a013591508082111561242a578384fd5b506124378a828b016120a5565b989b979a50959850939692959293505050565b60006020828403121561245b578081fd5b5035919050565b600060208284031215612473578081fd5b813565ffffffffffff81168114612126578182fd5b600060208284031215612499578081fd5b813560ff81168114612126578182fd5b600081518084526124c1816020860160208601612764565b601f01601f19169290920160200192915050565b600081516124e7818560208601612764565b9290920192915050565b600080845482600182811c91508083168061250d57607f831692505b602080841082141561252d57634e487b7160e01b87526022600452602487fd5b81801561254157600181146125525761257e565b60ff1986168952848901965061257e565b60008b815260209020885b868110156125765781548b82015290850190830161255d565b505084890196505b50505050505061258e81856124d5565b95945050505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906125e3908301846124a9565b9695505050505050565b60208152600061212660208301846124a9565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600082198211156126eb576126eb61281a565b500190565b600065ffffffffffff8083168185168083038211156127115761271161281a565b01949350505050565b60008261272957612729612830565b500490565b60008160001904831182151516156127485761274861281a565b500290565b60008282101561275f5761275f61281a565b500390565b60005b8381101561277f578181015183820152602001612767565b838111156115e25750506000910152565b600181811c908216806127a457607f821691505b602082108114156127c557634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156127df576127df61281a565b5060010190565b600060ff821660ff8114156127fd576127fd61281a565b60010192915050565b60008261281557612815612830565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146117d557600080fd5b6001600160e01b0319811681146117d557600080fdfea2646970667358221220c5852d8a758c9e072fbe5eb3a8c64d0dcd344c4a74869c12f9ba28f9d58cccb964736f6c63430008040033a2646970667358221220d91edfbc37a30c62f0912d6352f10566393b9af6eb00d2a036cd72e3ba644da564736f6c63430008040033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000765760003560e01c80632e20f03f146200007b578063715018a6146200009457806381830593146200009e5780638da5cb5b14620000ca578063e962371314620000d4578063ea88a3b814620000eb578063f2fde38b1462000104575b600080fd5b620000926200008c36600462000444565b6200011b565b005b620000926200015d565b600154620000b2906001600160a01b031681565b604051620000c19190620004bb565b60405180910390f35b620000b26200019f565b620000b2620000e5366004620003ed565b620001ae565b620000f560025481565b604051908152602001620000c1565b6200009262000115366004620003c9565b6200024f565b33620001266200019f565b6001600160a01b031614620001585760405162461bcd60e51b81526004016200014f90620004cf565b60405180910390fd5b600255565b33620001686200019f565b6001600160a01b031614620001915760405162461bcd60e51b81526004016200014f90620004cf565b6200019d6000620002f8565b565b6000546001600160a01b031690565b6001546000906001600160a01b0316336001600160a01b031614620001d257600080fd5b6000620001df8362000348565b60405163f2fde38b60e01b815290915081906001600160a01b0382169063f2fde38b9062000212908890600401620004bb565b600060405180830381600087803b1580156200022d57600080fd5b505af115801562000242573d6000803e3d6000fd5b5093979650505050505050565b336200025a6200019f565b6001600160a01b031614620002835760405162461bcd60e51b81526004016200014f90620004cf565b6001600160a01b038116620002ea5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200014f565b620002f581620002f8565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081604051620003599062000389565b62000365919062000504565b604051809103906000f08015801562000382573d6000803e3d6000fd5b5092915050565b61319c80620006bc83390190565b80356001600160a01b0381168114620003af57600080fd5b919050565b803563ffffffff81168114620003af57600080fd5b600060208284031215620003db578081fd5b620003e68262000397565b9392505050565b6000806040838503121562000400578081fd5b6200040b8362000397565b9150602083013567ffffffffffffffff81111562000427578182fd5b830160c0818603121562000439578182fd5b809150509250929050565b60006020828403121562000456578081fd5b5035919050565b81835260006001600160fb1b0383111562000476578081fd5b8260051b80836020870137939093016020019283525090919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0391909116815260200190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602080835262000517848562000673565b60c0838601526200052d60e08601828462000492565b9150506200053e8286018662000673565b601f19808785030160408801526200055884838562000492565b935062000569604089018962000621565b888603830160608a0152808652909490935086925085015b83831015620005b3576001600160a01b036200059d8662000397565b1681529385019360019290920191850162000581565b620005c260608a018a62000621565b9650945081888203016080890152620005dd8187876200045d565b95505050505050620005f260808501620003b4565b63ffffffff811660a0850152506200060d60a08501620003b4565b63ffffffff811660c0850152509392505050565b6000808335601e1984360301811262000638578283fd5b830160208101925035905067ffffffffffffffff8111156200065957600080fd5b8060051b36038313156200066c57600080fd5b9250929050565b6000808335601e198436030181126200068a578283fd5b830160208101925035905067ffffffffffffffff811115620006ab57600080fd5b8036038313156200066c57600080fdfe60806040523480156200001157600080fd5b506040516200319c3803806200319c8339810160408190526200003491620006a1565b608081015160a082015182516020840151604085015160608601516200005a3362000223565b8051825114620000cc5760405162461bcd60e51b815260206004820152603260248201527f5061796d656e7453706c69747465723a2070617965657320616e6420736861726044820152710cae640d8cadccee8d040dad2e6dac2e8c6d60731b60648201526084015b60405180910390fd5b60008251116200011f5760405162461bcd60e51b815260206004820152601a60248201527f5061796d656e7453706c69747465723a206e6f207061796565730000000000006044820152606401620000c3565b60005b8251811015620001a3576200018e8382815181106200015157634e487b7160e01b600052603260045260246000fd5b60200260200101518383815181106200017a57634e487b7160e01b600052603260045260246000fd5b60200260200101516200027360201b60201c565b806200019a8162000885565b91505062000122565b50508251620001bb9150600690602085019062000460565b508051620001d190600790602084019062000460565b5050600c805463ffffffff63ffffffff60601b0119166c0100000000000000000000000063ffffffff9586160263ffffffff19161792909316919091179091555050600e805460ff19169055620008cf565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038216620002e05760405162461bcd60e51b815260206004820152602c60248201527f5061796d656e7453706c69747465723a206163636f756e74206973207468652060448201526b7a65726f206164647265737360a01b6064820152608401620000c3565b60008111620003325760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e7453706c69747465723a207368617265732061726520300000006044820152606401620000c3565b6001600160a01b03821660009081526003602052604090205415620003ae5760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960448201526a206861732073686172657360a81b6064820152608401620000c3565b6005805460018082019092557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b038516908117909155600090815260036020526040902082905554620004179082906200082d565b600155604080516001600160a01b0384168152602081018390527f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac910160405180910390a15050565b8280546200046e9062000848565b90600052602060002090601f016020900481019282620004925760008555620004dd565b82601f10620004ad57805160ff1916838001178555620004dd565b82800160010185558215620004dd579182015b82811115620004dd578251825591602001919060010190620004c0565b50620004eb929150620004ef565b5090565b5b80821115620004eb5760008155600101620004f0565b600082601f83011262000517578081fd5b81516020620005306200052a8362000807565b620007d4565b80838252828201915082860187848660051b890101111562000550578586fd5b855b85811015620005855781516001600160a01b038116811462000572578788fd5b8452928401929084019060010162000552565b5090979650505050505050565b600082601f830112620005a3578081fd5b81516020620005b66200052a8362000807565b80838252828201915082860187848660051b8901011115620005d6578586fd5b855b858110156200058557815184529284019290840190600101620005d8565b600082601f83011262000607578081fd5b81516001600160401b03811115620006235762000623620008b9565b602062000639601f8301601f19168201620007d4565b82815285828487010111156200064d578384fd5b835b838110156200066c5785810183015182820184015282016200064f565b838111156200067d57848385840101525b5095945050505050565b805163ffffffff811681146200069c57600080fd5b919050565b600060208284031215620006b3578081fd5b81516001600160401b0380821115620006ca578283fd5b9083019060c08286031215620006de578283fd5b620006e8620007a9565b825182811115620006f7578485fd5b6200070587828601620005f6565b8252506020830151828111156200071a578485fd5b6200072887828601620005f6565b60208301525060408301518281111562000740578485fd5b6200074e8782860162000506565b60408301525060608301518281111562000766578485fd5b620007748782860162000592565b606083015250620007886080840162000687565b60808201526200079b60a0840162000687565b60a082015295945050505050565b60405160c081016001600160401b0381118282101715620007ce57620007ce620008b9565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620007ff57620007ff620008b9565b604052919050565b60006001600160401b03821115620008235762000823620008b9565b5060051b60200190565b60008219821115620008435762000843620008a3565b500190565b600181811c908216806200085d57607f821691505b602082108114156200087f57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156200089c576200089c620008a3565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6128bd80620008df6000396000f3fe60806040526004361061015b5760003560e01c8063715018a6116100bc578063715018a6146103785780638b83209b1461038d5780638da5cb5b146103ad57806395d89b41146103c25780639852595c146103d7578063a22cb4651461040d578063b145a5b81461042d578063b88d4fde14610447578063c87b56dd14610467578063ce7c2ac214610487578063e06174e4146104bd578063e33b7de31461054d578063e985e9c514610562578063f2fde38b1461058257600080fd5b806301ffc9a7146101a057806306fdde03146101d5578063081812fc146101f7578063095ea7b31461022f578063191655871461025157806323b872dd146102715780633a98ef391461029157806342842e0e146102b0578063445e6058146102d05780636352211e146102f05780636456c30f146103105780636c0360eb146103235780636fecc2491461033857806370a082311461035857600080fd5b3661019b577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be7703334604051610191929190612597565b60405180910390a1005b600080fd5b3480156101ac57600080fd5b506101c06101bb366004612341565b6105a2565b60405190151581526020015b60405180910390f35b3480156101e157600080fd5b506101ea6105f4565b6040516101cc91906125ed565b34801561020357600080fd5b5061021761021236600461244a565b610686565b6040516001600160a01b0390911681526020016101cc565b34801561023b57600080fd5b5061024f61024a3660046122ae565b610713565b005b34801561025d57600080fd5b5061024f61026c36600461210a565b610824565b34801561027d57600080fd5b5061024f61028c366004612165565b6109ec565b34801561029d57600080fd5b506001545b6040519081526020016101cc565b3480156102bc57600080fd5b5061024f6102cb366004612165565b610a1d565b3480156102dc57600080fd5b5061024f6102eb366004612379565b610a38565b3480156102fc57600080fd5b5061021761030b36600461244a565b610d4a565b61024f61031e3660046122d9565b610dc1565b34801561032f57600080fd5b506101ea6112ba565b34801561034457600080fd5b5061024f6103533660046122ae565b611348565b34801561036457600080fd5b506102a261037336600461210a565b6113d1565b34801561038457600080fd5b5061024f611458565b34801561039957600080fd5b506102176103a836600461244a565b611493565b3480156103b957600080fd5b506102176114d1565b3480156103ce57600080fd5b506101ea6114e0565b3480156103e357600080fd5b506102a26103f236600461210a565b6001600160a01b031660009081526004602052604090205490565b34801561041957600080fd5b5061024f61042836600461227d565b6114ef565b34801561043957600080fd5b50600e546101c09060ff1681565b34801561045357600080fd5b5061024f6104623660046121a5565b6115b0565b34801561047357600080fd5b506101ea61048236600461244a565b6115e8565b34801561049357600080fd5b506102a26104a236600461210a565b6001600160a01b031660009081526003602052604090205490565b3480156104c957600080fd5b50600c5461050d9063ffffffff808216916401000000008104821691600160401b8204811691600160601b810490911690600160801b90046001600160801b031685565b6040805163ffffffff968716815294861660208601529285169284019290925290921660608201526001600160801b03909116608082015260a0016101cc565b34801561055957600080fd5b506002546102a2565b34801561056e57600080fd5b506101c061057d36600461212d565b61170a565b34801561058e57600080fd5b5061024f61059d36600461210a565b611738565b60006001600160e01b031982166380ac58cd60e01b14806105d357506001600160e01b03198216635b5e139f60e01b145b806105ee57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606006805461060390612790565b80601f016020809104026020016040519081016040528092919081815260200182805461062f90612790565b801561067c5780601f106106515761010080835404028352916020019161067c565b820191906000526020600020905b81548152906001019060200180831161065f57829003601f168201915b5050505050905090565b6000610691826117d8565b6106f75760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600a60205260409020546001600160a01b031690565b600061071e82610d4a565b9050806001600160a01b0316836001600160a01b0316141561078c5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016106ee565b336001600160a01b03821614806107a857506107a8813361170a565b6108155760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b60648201526084016106ee565b61081f83836117f5565b505050565b6001600160a01b0381166000908152600360205260409020546108985760405162461bcd60e51b815260206004820152602660248201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060448201526573686172657360d01b60648201526084016106ee565b6000600254476108a891906126d8565b6001600160a01b03831660009081526004602090815260408083205460015460039093529083205493945091926108df908561272e565b6108e9919061271a565b6108f3919061274d565b9050806109565760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060448201526a191d59481c185e5b595b9d60aa1b60648201526084016106ee565b6001600160a01b03831660009081526004602052604090205461097a9082906126d8565b6001600160a01b0384166000908152600460205260409020556002546109a19082906126d8565b6002556109ae8382611863565b7fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b05683826040516109df929190612597565b60405180910390a1505050565b6109f63382611979565b610a125760405162461bcd60e51b81526004016106ee90612687565b61081f838383611a43565b61081f838383604051806020016040528060008152506115b0565b33610a416114d1565b6001600160a01b031614610a675760405162461bcd60e51b81526004016106ee90612652565b600e5460ff1615610aa95760405162461bcd60e51b815260206004820152600c60248201526b696e697420616c726561647960a01b60448201526064016106ee565b600e805460ff19166001179055828181148015610ac65750600081115b8015610ad457506101008111155b610b165760405162461bcd60e51b81526020600482015260136024820152722a34b1b5b2ba1d103632bb32b61032b93937b960691b60448201526064016106ee565b6000805b828160ff161015610c9f57600f80546001810182556000919091527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8026005808304919091018054919092066006026101000a65ffffffffffff8181021990921691851602179055868660ff8316818110610ba457634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610bb99190612462565b610bc390836126f0565b601080546001810182556000919091527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6726005808304919091018054919092066006026101000a65ffffffffffff818102199092169184160217905591506011858560ff8416818110610c4657634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610c5b919061210a565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b0390921691909117905580610c97816127e6565b915050610b1a565b50600c5463ffffffff1665ffffffffffff821614610d155760405162461bcd60e51b815260206004820152602d60248201527f5469636b65743a2073756d206f6620737570706c79206f662065616368206c6560448201526c0eccad840dcdee840dac2e8c6d609b1b60648201526084016106ee565b610d21600d8a8a61200c565b5050600c80546001600160801b03978816600160801b0297169690961790955550505050505050565b6000818152600860205260408120546001600160a01b0316806105ee5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016106ee565b600e5460ff16610e0d5760405162461bcd60e51b8152602060048201526017602482015276151a58dad95d0e881b9bdd081a5b9a5d1a585b1a5e9959604a1b60448201526064016106ee565b600c54600160801b90046001600160801b03164211610e675760405162461bcd60e51b8152602060048201526016602482015275151a58dad95d0e881cd85b19481b9bdd081cdd185c9d60521b60448201526064016106ee565b6000805b60ff811685111561112c57600086868360ff16818110610e9b57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610eb09190612488565b60115490915060ff821610610eff5760405162461bcd60e51b8152602060048201526015602482015274151a58dad95d0e881b9bc81cdd58da081b195d995b605a1b60448201526064016106ee565b6000600186868560ff16818110610f2657634e487b7160e01b600052603260045260246000fd5b90506020020135600f6000018460ff1681548110610f5457634e487b7160e01b600052603260045260246000fd5b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff16610f8e91906126d8565b610f98919061274d565b9050600f6001018260ff1681548110610fc157634e487b7160e01b600052603260045260246000fd5b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff16811061103f5760405162461bcd60e51b815260206004820152601e60248201527f5469636b65743a20736f6c64206f75742061742074686973206c6576656c000060448201526064016106ee565b85858460ff1681811061106257634e487b7160e01b600052603260045260246000fd5b90506020020135600f6002018360ff168154811061109057634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546110af91906001600160a01b031661272e565b6110b990856126d8565b9350833410156111175760405162461bcd60e51b815260206004820152602360248201527f5469636b65743a206e6f7420656e6f75676820666f72207469636b657420707260448201526269636560e81b60648201526084016106ee565b50508080611124906127e6565b915050610e6b565b5060005b848110156112b257600086868381811061115a57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061116f9190612488565b60ff16905060005b85858481811061119757634e487b7160e01b600052603260045260246000fd5b9050602002013581101561129d576000600f60000183815481106111cb57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff1690506001600f600001848154811061121b57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600591828204019190066006028282829054906101000a900465ffffffffffff1661125091906126f0565b92506101000a81548165ffffffffffff021916908365ffffffffffff16021790555061128a61127c3390565b8265ffffffffffff16611be3565b5080611295816127cb565b915050611177565b505080806112aa906127cb565b915050611130565b505050505050565b600d80546112c790612790565b80601f01602080910402602001604051908101604052809291908181526020018280546112f390612790565b80156113405780601f1061131557610100808354040283529160200191611340565b820191906000526020600020905b81548152906001019060200180831161132357829003601f168201915b505050505081565b336113516114d1565b6001600160a01b0316146113775760405162461bcd60e51b81526004016106ee90612652565b600c5463ffffffff1681116113c35760405162461bcd60e51b815260206004820152601260248201527139b832b1b4b0b61036b4b73a1032b93937b960711b60448201526064016106ee565b6113cd8282611be3565b5050565b60006001600160a01b03821661143c5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016106ee565b506001600160a01b031660009081526009602052604090205490565b336114616114d1565b6001600160a01b0316146114875760405162461bcd60e51b81526004016106ee90612652565b6114916000611bfd565b565b6000600582815481106114b657634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031692915050565b6000546001600160a01b031690565b60606007805461060390612790565b6001600160a01b0382163314156115445760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b60448201526064016106ee565b336000818152600b602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6115ba3383611979565b6115d65760405162461bcd60e51b81526004016106ee90612687565b6115e284848484611c4d565b50505050565b60606115f3826117d8565b61164d5760405162461bcd60e51b815260206004820152602560248201527f5469636b65743a20717565727920666f72206e6f6e2d6578697374696e6720746044820152641a58dad95d60da1b60648201526084016106ee565b60105460005b818160ff161015611703576010805460ff831690811061168357634e487b7160e01b600052603260045260246000fd5b90600052602060002090600591828204019190066006029054906101000a900465ffffffffffff1665ffffffffffff168410156116f157600d6116c88260ff16611c80565b6040516020016116d99291906124f1565b60405160208183030381529060405292505050919050565b806116fb816127e6565b915050611653565b5050919050565b6001600160a01b039182166000908152600b6020908152604080832093909416825291909152205460ff1690565b336117416114d1565b6001600160a01b0316146117675760405162461bcd60e51b81526004016106ee90612652565b6001600160a01b0381166117cc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106ee565b6117d581611bfd565b50565b6000908152600860205260409020546001600160a01b0316151590565b6000818152600a6020526040902080546001600160a01b0319166001600160a01b038416908117909155819061182a82610d4a565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b804710156118b35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016106ee565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611900576040519150601f19603f3d011682016040523d82523d6000602084013e611905565b606091505b505090508061081f5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b60648201526084016106ee565b6000611984826117d8565b6119e55760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016106ee565b60006119f083610d4a565b9050806001600160a01b0316846001600160a01b03161480611a2b5750836001600160a01b0316611a2084610686565b6001600160a01b0316145b80611a3b5750611a3b818561170a565b949350505050565b826001600160a01b0316611a5682610d4a565b6001600160a01b031614611abe5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016106ee565b6001600160a01b038216611b205760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106ee565b611b2b6000826117f5565b6001600160a01b0383166000908152600960205260408120805460019290611b5490849061274d565b90915550506001600160a01b0382166000908152600960205260408120805460019290611b829084906126d8565b909155505060008181526008602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6113cd828260405180602001604052806000815250611d99565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611c58848484611a43565b611c6484848484611dcc565b6115e25760405162461bcd60e51b81526004016106ee90612600565b606081611ca45750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611cce5780611cb8816127cb565b9150611cc79050600a8361271a565b9150611ca8565b6000816001600160401b03811115611cf657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611d20576020820181803683370190505b5090505b8415611a3b57611d3560018361274d565b9150611d42600a86612806565b611d4d9060306126d8565b60f81b818381518110611d7057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611d92600a8661271a565b9450611d24565b611da38383611ed9565b611db06000848484611dcc565b61081f5760405162461bcd60e51b81526004016106ee90612600565b60006001600160a01b0384163b15611ece57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611e109033908990889088906004016125b0565b602060405180830381600087803b158015611e2a57600080fd5b505af1925050508015611e5a575060408051601f3d908101601f19168201909252611e579181019061235d565b60015b611eb4573d808015611e88576040519150601f19603f3d011682016040523d82523d6000602084013e611e8d565b606091505b508051611eac5760405162461bcd60e51b81526004016106ee90612600565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611a3b565b506001949350505050565b6001600160a01b038216611f2f5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106ee565b611f38816117d8565b15611f855760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106ee565b6001600160a01b0382166000908152600960205260408120805460019290611fae9084906126d8565b909155505060008181526008602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b82805461201890612790565b90600052602060002090601f01602090048101928261203a5760008555612080565b82601f106120535782800160ff19823516178555612080565b82800160010185558215612080579182015b82811115612080578235825591602001919060010190612065565b5061208c929150612090565b5090565b5b8082111561208c5760008155600101612091565b60008083601f8401126120b6578081fd5b5081356001600160401b038111156120cc578182fd5b6020830191508360208260051b85010111156120e757600080fd5b9250929050565b80356001600160801b038116811461210557600080fd5b919050565b60006020828403121561211b578081fd5b81356121268161285c565b9392505050565b6000806040838503121561213f578081fd5b823561214a8161285c565b9150602083013561215a8161285c565b809150509250929050565b600080600060608486031215612179578081fd5b83356121848161285c565b925060208401356121948161285c565b929592945050506040919091013590565b600080600080608085870312156121ba578081fd5b84356121c58161285c565b935060208501356121d58161285c565b92506040850135915060608501356001600160401b03808211156121f7578283fd5b818701915087601f83011261220a578283fd5b81358181111561221c5761221c612846565b604051601f8201601f19908116603f0116810190838211818310171561224457612244612846565b816040528281528a602084870101111561225c578586fd5b82602086016020830137918201602001949094529598949750929550505050565b6000806040838503121561228f578182fd5b823561229a8161285c565b91506020830135801515811461215a578182fd5b600080604083850312156122c0578182fd5b82356122cb8161285c565b946020939093013593505050565b600080600080604085870312156122ee578384fd5b84356001600160401b0380821115612304578586fd5b612310888389016120a5565b90965094506020870135915080821115612328578384fd5b50612335878288016120a5565b95989497509550505050565b600060208284031215612352578081fd5b813561212681612871565b60006020828403121561236e578081fd5b815161212681612871565b60008060008060008060006080888a031215612393578485fd5b87356001600160401b03808211156123a9578687fd5b818a0191508a601f8301126123bc578687fd5b8135818111156123ca578788fd5b8b60208285010111156123db578788fd5b602083019950809850506123f160208b016120ee565b965060408a0135915080821115612406578485fd5b6124128b838c016120a5565b909650945060608a013591508082111561242a578384fd5b506124378a828b016120a5565b989b979a50959850939692959293505050565b60006020828403121561245b578081fd5b5035919050565b600060208284031215612473578081fd5b813565ffffffffffff81168114612126578182fd5b600060208284031215612499578081fd5b813560ff81168114612126578182fd5b600081518084526124c1816020860160208601612764565b601f01601f19169290920160200192915050565b600081516124e7818560208601612764565b9290920192915050565b600080845482600182811c91508083168061250d57607f831692505b602080841082141561252d57634e487b7160e01b87526022600452602487fd5b81801561254157600181146125525761257e565b60ff1986168952848901965061257e565b60008b815260209020885b868110156125765781548b82015290850190830161255d565b505084890196505b50505050505061258e81856124d5565b95945050505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906125e3908301846124a9565b9695505050505050565b60208152600061212660208301846124a9565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600082198211156126eb576126eb61281a565b500190565b600065ffffffffffff8083168185168083038211156127115761271161281a565b01949350505050565b60008261272957612729612830565b500490565b60008160001904831182151516156127485761274861281a565b500290565b60008282101561275f5761275f61281a565b500390565b60005b8381101561277f578181015183820152602001612767565b838111156115e25750506000910152565b600181811c908216806127a457607f821691505b602082108114156127c557634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156127df576127df61281a565b5060010190565b600060ff821660ff8114156127fd576127fd61281a565b60010192915050565b60008261281557612815612830565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146117d557600080fd5b6001600160e01b0319811681146117d557600080fdfea2646970667358221220c5852d8a758c9e072fbe5eb3a8c64d0dcd344c4a74869c12f9ba28f9d58cccb964736f6c63430008040033a2646970667358221220d91edfbc37a30c62f0912d6352f10566393b9af6eb00d2a036cd72e3ba644da564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "genNFTContract(address,(string,string,address[],uint256[],uint32,uint32))": {
        "params": {
          "baseSettings": "See BaseSettings in ./NoobFriendlyTokenTemplate.sol",
          "client": "User who want to generate an NFT contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateSlottingFee(uint256)": {
        "details": "Update slotting fee"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "adminAddr()": {
        "notice": "Admin contract address"
      },
      "genNFTContract(address,(string,string,address[],uint256[],uint32,uint32))": {
        "notice": "Generate NFT contract for user"
      },
      "slottingFee()": {
        "notice": "Slotting fee of generate one NFT contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Generator/NFTTicketGenerator.sol:NFTTicketGenerator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3578,
        "contract": "contracts/Generator/NFTTicketGenerator.sol:NFTTicketGenerator",
        "label": "adminAddr",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3582,
        "contract": "contracts/Generator/NFTTicketGenerator.sol:NFTTicketGenerator",
        "label": "slottingFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}